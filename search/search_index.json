{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-jujubasvg-documentation","title":"Welcome to the JujubaSVG documentation! \ud83d\udc4b","text":"<p>jujubaSVG is a user-friendly library for handling SVG files in Android and Flutter applications. It enables granular manipulation of SVG elements - you can access any element by its ID to modify properties like background color, stroke, and other attributes.</p> <p>Take a look at our repository.</p>"},{"location":"#summary","title":"Summary","text":""},{"location":"#1-setup","title":"1. Setup","text":"<ul> <li> <p>Android</p> </li> <li> <p>Flutter</p> </li> </ul>"},{"location":"#2-available-commands","title":"2. Available commands","text":""},{"location":"#3-contributions","title":"3. Contributions","text":""},{"location":"available-commands/","title":"Available Commands \ud83d\udcd0","text":"<p>jujubaSVG already provides some commands. This page we will demonstrate how to use them in Kotlin and Dart (Flutter).</p>"},{"location":"available-commands/#update-background-color","title":"Update background color","text":"<p>Update the background color of a node. For example:</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    Command.UpdateBackgroundColor(\n        id = nodeInfo.id,\n        color = getRainbowColor()\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    UpdateBackgroundColor(\n        id: nodeInfo.id, \n        colorHex: getRainbowColorInHex()\n    ),\n);\n</code></pre>"},{"location":"available-commands/#update-stroke-color","title":"Update stroke color","text":"<p>Update the stroke color of a node.</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    Command.UpdateStrokeColor(\n        id = nodeInfo.id,\n        color = getRainbowColor()\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    UpdateStrokeColor(\n        id: nodeInfo.id, \n        colorHex: getRainbowColorInHex(),\n    ),\n);\n</code></pre>"},{"location":"available-commands/#update-stroke-width","title":"Update stroke width","text":"<p>Update the stroke width of a node.</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    Command.UpdateStrokeWidth(\n        id = nodeInfo.id,\n        widthInPx = 20\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    UpdateStrokeWidth(\n        id: nodeInfo.id, \n        widthInPx: 20,\n    ),\n);\n</code></pre>"},{"location":"available-commands/#remove-a-node","title":"Remove a node","text":"<p>Remove a node.</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    Command.RemoveNode(\n        id = nodeInfo.id\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    RemoveNode(\n        id: nodeInfo.id,\n    )\n);\n</code></pre>"},{"location":"available-commands/#update-root-background-color","title":"Update root background color","text":"<p>Update the root background color.</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    Command.UpdateRootBackgroundColor(\n        color = Color.White\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    UpdateRootBackgroundColor(\n        colorInHex: '#FFFFFF',\n    ),\n);\n</code></pre>"},{"location":"available-commands/#add-rounded-image","title":"Add Rounded Image","text":"<p>Add a rounded image into the same parent of the elementId.</p> <pre><code>// KOTLIN\njujubaCommander.execute(\n    AddRoundedImage(\n        elementId = nodeInfo.id,\n        imageId = \"imageId\",\n        imageUrl = \"https://i.imgur.com/LQIsf.jpeg\",\n        widthInPx = 56,\n        heightInPx = 56,\n        coordinate = NodeCoordinate(0f, 120f)\n    )\n)\n</code></pre> <pre><code>// DART\ncommander.execute(\n    AddRoundedImage(\n        elementId: nodeInfo.id,\n        imageId: 'imageId',\n        imageUrl: 'https://i.imgur.com/LQIsf.jpeg',\n        widthInPx: 56,\n        heightInPx: 56,\n        coordinate: NodeCoordinate(\n            x: 0.0,\n            y: 120.0,\n        ),\n    ),\n);\n</code></pre>"},{"location":"contributions/","title":"Contributions \ud83e\udd1d","text":"<p>We encourage contributions of all types! Whether it\u2019s reporting issues, suggesting new features, or submitting pull requests, you\u2019re welcome to help improve the plugin.</p> <ul> <li>Check out the issues page for ideas.</li> <li>Feel free to submit pull requests.</li> </ul>"},{"location":"contributions/#some-tips","title":"Some tips","text":"<ul> <li>If you have any questions about contributions, feel free to reach out to someone from CodandoTV. You can contact Gabriel Moro or Rodrigo Vianna.</li> </ul>"},{"location":"setup/android/","title":"Android","text":""},{"location":"setup/android/#1-add-the-dependency","title":"1. Add the Dependency","text":"<p>You need to add the following line in your desired module/build.gradle.kts:</p> <pre><code>implementation(\"io.github.codandotv:jujubaSVG:&lt;library version&gt;\")\n</code></pre> <p>Make sure your application has internet permission. This is required to run javascript commands:</p> <pre><code>// AndroidManifest.xml\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre>"},{"location":"setup/android/#2-define-your-commander","title":"2. Define your Commander","text":"<p>You need to define at the top level of your composable function the commander (a friend that will help you to send commands to the library):</p> <pre><code>@Composable\nfun YourComposable() {\n    val jujubaCommander = rememberJujubaCommander()\n    // ...\n}\n</code></pre>"},{"location":"setup/android/#3-declare-the-widget-to-render-the-svg","title":"3. Declare the Widget to render the SVG","text":"<p>Now you need to declare the Widget responsible to render the SVG file:</p> <pre><code>@Composable\nfun YourComposable() {\n    val jujubaCommander = rememberJujubaCommander()\n\n    JujubaSVG(\n        svgText = svgText,\n        onElementClick = { nodeInfo -&gt;\n            println(\"NodeInfo $nodeInfo\")\n            coroutineScope.launch {\n                // commander sample\n                jujubaCommander.execute(\n                    Command.RemoveNode(\n                        nodeInfo.id\n                    )\n                )\n            }\n        },\n        commander = jujubaCommander,\n    )\n}\n</code></pre> <p>Don\u2019t forget:</p> <ul> <li><code>svgText</code> should contain all content of your SVG file.</li> </ul> <p>\u2013</p> <p>Any problems you are facing, any suggestions you want to add, please feel free to reach us out.</p>"},{"location":"setup/flutter/","title":"Flutter","text":""},{"location":"setup/flutter/#1-add-the-dependency","title":"1. Add the Dependency","text":"<p>You need to add jujuba_svg library in your <code>pubspec.yaml</code>:</p> <pre><code>dependencies:\n  jujuba_svg: ^1.0.0\n</code></pre> <p>For Android, make sure your application has internet permission. This is required to run javascript commands.</p> <pre><code>// AndroidManifest.xml\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre>"},{"location":"setup/flutter/#2-define-your-commander","title":"2. Define your Commander","text":"<p>Let\u2019s say you want to use the library in your <code>my_beatiful_screen.dart</code>. You need to initialize the controller:</p> <pre><code>class MyBeautifulScreen extends StatelessWidget {\n  final JujubaCommander commander = JujubaCommander();\n\n//...\n</code></pre>"},{"location":"setup/flutter/#3-declare-the-widget-to-render-the-svg","title":"3. Declare the Widget to render the SVG","text":"<p>The library provides a widget called <code>JujubaSVGWidget</code>, there you can the <code>commander</code>, <code>svgText</code>, and <code>onElementClick</code>.</p> <ul> <li> <p><code>commander</code>: allow you to send commands to manipulate the SVG;</p> </li> <li> <p><code>svgText</code>: your SVG;</p> </li> <li> <p><code>onElementClick</code>: callback to intercept click events in your SVG.</p> </li> </ul> <pre><code>class MyBeautifulScreen extends StatelessWidget {\n  //...\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: JujubaSVGWidget(\n            commander: commander,\n            svgText: svgText,\n            onElementClick: (nodeInfo) =&gt; {},\n        ),\n    )\n  // ...\n</code></pre> <p>Don\u2019t forget:</p> <ul> <li><code>svgText</code> should contain all content of your SVG file.</li> </ul>"}]}