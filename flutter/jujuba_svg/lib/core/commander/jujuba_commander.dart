import 'dart:async';

import 'package:jujuba_svg/core/commander/command.dart';

/// A command dispatcher that converts high-level drawing or manipulation
/// [Command] objects into JavaScript instructions and emits them through a stream.
///
/// The [JujubaCommander] acts as a bridge between Dart code and the JavaScript
/// layer used to manipulate SVG elements in a WebView.
/// Each time a [Command] is executed, it is transformed into an equivalent
/// JavaScript statement string and sent through a broadcast stream.
///
/// Example:
/// ```dart
/// final commander = JujubaCommander();
///
/// // Execute a command
/// commander.execute(UpdateBackgroundColor(
///   id: 'circle_1',
///   colorHex: '#FF0000',
/// ));
/// ```
///
/// This will emit:
/// ```js
/// updateBackgroundColor('circle_1','#FF0000');
/// ```
///
/// The class supports a variety of command types such as:
/// - [UpdateBackgroundColor]
/// - [UpdateStrokeColor]
/// - [UpdateStrokeWidth]
/// - [RemoveNode]
/// - [UpdateRootBackgroundColor]
/// - [AddRoundedImage]
///
/// See also:
/// - [Command], the base class for all supported command types.
class JujubaCommander {
  final _command = StreamController<String>.broadcast();

  /// A stream of JavaScript command strings generated by [execute].
  ///
  /// Widgets or services that need to execute the generated JavaScript code
  /// (such as a WebView) can subscribe to this stream.
  Stream<String> get stream => _command.stream;

  /// Converts a [Command] into a JavaScript function call and emits it through [stream].
  ///
  /// Each [Command] variant is mapped to a specific JavaScript function call,
  /// such as `updateBackgroundColor()` or `removeNode()`.
  void execute(Command command) {
    _command.add(_convertToJSCode(command));
  }

  /// Converts a [Command] object into its equivalent JavaScript code representation.
  ///
  /// This method is internal and used by [execute] to transform Dart commands
  /// into JavaScript strings that can be interpreted by the web layer.

  // ignore_for_file: lines_longer_than_80_chars
  String _convertToJSCode(Command command) {
    switch (command) {
      case UpdateBackgroundColor():
        return 'updateBackgroundColor(\'${command.id}\',\'${command.colorHex}\');';
      case UpdateStrokeColor():
        return 'updateStrokeColor(\'${command.id}\',\'${command.colorHex}\');';
      case UpdateStrokeWidth():
        return 'updateStrokeWidth(\'${command.id}\',${command.widthInPx});';
      case RemoveNode():
        return 'removeNode(\'${command.id}\');';
      case UpdateRootBackgroundColor():
        return 'updateRootBackgroundColor(\'${command.colorInHex}\');';
      case AddRoundedImage():
        return 'addRoundedImage('
            '\'${command.elementId}\','
            '\'${command.imageId}\','
            '\'${command.imageUrl}\','
            '\'${command.widthInPx}\','
            '\'${command.heightInPx}\','
            '\'${command.coordinate.x}\','
            '\'${command.coordinate.y}\''
            ');';
    }
  }
}
